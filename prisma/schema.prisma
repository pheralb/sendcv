// ------------------------------
// Settings
// ------------------------------

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// ------------------------------
// Next Auth schemas
// ------------------------------

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String           @id @default(cuid())
    name          String?
    username      String?          @unique
    email         String?          @unique
    verified      Boolean          @default(false)
    emailVerified DateTime?
    image         String?
    website       String?
    description   String?          @db.Text
    twitterUrl    String?
    linkedinUrl   String?
    experiences   UserExperience[]
    accounts      Account[]
    sessions      Session[]
    offers        Offers[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// ------------------------------
// App schemas
// ------------------------------

model Offers {
    id          String   @id @default(cuid())
    title       String
    description String
    infojobsUrl String
    author      String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    User        User?    @relation(fields: [userId], references: [id])
    userId      String?

    @@index([userId])
    @@map("offers")
}

model UserExperience {
    id          String    @id @default(cuid())
    title       String
    description String
    company     String
    location    String
    startDate   DateTime
    endDate     DateTime?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    User        User?     @relation(fields: [userId], references: [id])
    userId      String?

    @@index([userId])
    @@map("experiences")
}
